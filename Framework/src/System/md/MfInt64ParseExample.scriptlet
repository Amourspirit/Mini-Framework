; Input of 10 parses to 10
; input of 0xA parses to 10 as 0XA is a hex value
; input of -15 parses to -15
; input of -0x10 parses to -16 as -0x10 is hex for -16
; input of abc resuts in an error
; leading and trailing spaces are allowed
try {
	InputBox, myInput, Enter value, Enter a number to parse!
	if (MfNull.IsNull(myInput)) {
		MsgBox Sorry no input!
	} else {
		int := MfInt64.Parse(myInput)
		MsgBox My Integer Number is:%int%
	}
} catch e {
	MsgBox, 8240, Error, % "An error has occured!`r`n" . e.Message
}
ExitApp

; Example using MfParams and adding ReturnAsObject to MfParams.Data
; this example passes MfParams into MfInt64.Parse method with
; Data Key of ReturnAsObject. This cause MfInt64.Parse to return is value
; as an instance of MfInt64 rather then the default of a var containing integer.
pStr := "33"
Parms := new MfParams()
Parms.AddString(pStr)
Parms.Data.Add("ReturnAsObject",true)
int := MfInt64.Parse(Parms)
MsgBox % int.Value